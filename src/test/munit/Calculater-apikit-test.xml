<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd">
    <spring:beans>
        <spring:import resource="classpath:Calculater.xml" />
    </spring:beans>
    <munit:config mock-connectors="false" mock-inbounds="false" doc:name="MUnit configuration"/>
    <http:request-config name="HTTP_Request_Configuration" host="localhost" port="8081" basePath="/api" doc:name="HTTP Request Configuration"/>
    <munit:test name="get:/calculater/sub:Calculator-config-200-application/json-FlowTest" description="Verifying functionality of [get:/calculater/sub:Calculator-config-200-application/json]">
        <mock:when messageProcessor=".*:.*" doc:name="Mock - SOAP Resposne - Subtract">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Web Service Consumer - Calculator -Op-Subtract']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource('scaffolder/response/get_200_webservice_sub_application_xml.xml').asStream()]" encoding="UTF-8" mimeType="text/xml">
                <mock:outbound-properties>
                    <mock:outbound-property key="http.status" value="200" encoding="UTF-8"/>
                </mock:outbound-properties>
            </mock:then-return>
        </mock:when>
        <set-variable variableName="num1" value="#['100']" doc:name="num1"/>
        <set-variable variableName="num2" value="#['12']" doc:name="num2"/>
        <http:request config-ref="HTTP_Request_Configuration" path="/calculater/sub" method="GET" doc:name="HTTP Request to MyCalulater API">
            <http:request-builder>
                <http:query-param paramName="num1" value="#[flowVars['num1']]" />
                <http:query-param paramName="num2" value="#[flowVars['num2']]" />
                <http:header headerName="Accept" value="application/json"/>
                <http:header headerName="x-identity" value="x-identity-value"/>
            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_200_calculater_sub_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/calculater/sub:Calculator-config-404-application/json-FlowTest" description="Verifying functionality of [get:/calculater/sub:Calculator-config-404-application/json]" ignore="true">
        <set-variable variableName="num1" value="100" doc:name="num1" />
        <set-variable variableName="num2" value="50" doc:name="num2" />
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/calculater/subb" doc:name="HTTP">
            <http:request-builder>
                <http:query-param paramName="num1" value="#[flowVars['num1']]"/>
                <http:query-param paramName="num2" value="#[flowVars['num2']]"/>
                <http:header headerName="Accept" value="application/json"/>
                <http:header headerName="x-identity" value="x-identity-value"/>

            </http:request-builder>
            <http:failure-status-code-validator values="404"/>

        </http:request>
        <object-to-string-transformer doc:name="http response to string" ignoreBadInput="true"/>
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(404))]" doc:name="assert that - http.status eq 404" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_404_calculater_sub_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="post:/calculater/add:application/json:Calculator-config-200-application/json-FlowTest" description="Verifying functionality of [post:/calculater/add:application/json:Calculator-config-200-application/json]">
        <mock:when messageProcessor=".*:.*" doc:name="Mock - SOAP Resposne - Addition">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Web Service Consumer - Calculator']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource('scaffolder/response/post_200_webservice_add_application_xml.xml').asStream()]" encoding="UTF-8" mimeType="text/xml">
                <mock:outbound-properties>
                    <mock:outbound-property key="http.status" value="200" encoding="UTF-8"/>
                </mock:outbound-properties>
            </mock:then-return>
        </mock:when>
        <set-payload value="#[getResource('scaffolder/request/post_calculater_add_application_json.json').asString()]" doc:name="Set Payload"/>
        <http:request config-ref="HTTP_Request_Configuration" path="/calculater/add" method="POST" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json" />
                <http:header headerName="Content-Type" value="application/json" />
                <http:header headerName="x-identity" value="x-identity-value"/>
            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/post_200_calculater_add_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="Calculater-apikit-test-get:/calculater/sub:Calculater-configTest" description="Test" >
        <mock:when messageProcessor=".*:.*" doc:name="Mock - SOAP Resposne - Subtract">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Web Service Consumer - Calculator']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource('scaffolder/response/post_200_webservice_add_application_xml.xml').asStream()]" encoding="UTF-8" mimeType="text/xml">
                <mock:outbound-properties>
                    <mock:outbound-property key="http.status" value="200" encoding="UTF-8"/>
                </mock:outbound-properties>
            </mock:then-return>
        </mock:when>
        <munit:set payload="#[getResource('scaffolder/request/post_calculater_add_application_json.json').asString()]" mimeType="application/json" doc:name="Set Message">
            <munit:invocation-properties>
                <munit:invocation-property key="http.query.params" value="{[num1=[100], num2=[12]]}" encoding="UTF-8" mimeType="application/json"/>
            </munit:invocation-properties>
        </munit:set>
        <flow-ref name="post:/calculater/add:application/json:Calculater-config" doc:name="Flow-ref to post:/calculater/add:application/json:Calculater-config"/>
        <logger message="#[message]" level="INFO" doc:name="Logger"/>
    </munit:test>
</mule>
